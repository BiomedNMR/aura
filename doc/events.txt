Events
======

CUDA apparently can synchronize streams between each other through events.
cuStreamWaitEvent can eneque a wait in one stream that waits for an event
in another stream. This is really really good in terms of having streams
as general concurrency concepts. OpenCL seems to be lacking this feature
and I really don't know why. Or maybe I have not found it yet or don't
understand some of the OpenCL documentation. Too bad.

Seems like you need a multi-context of some sort to make this work in OpenCL.
Probably makes sense. Otherwise you could ask OpenCL to synchronize events
from different platforms which won't work since different implementors
have different ways of representing and working with events.

From the CUDA Driver API docs:
If cuEventRecord() has previously been called on hEvent, then this call will 
overwrite any existing state in hEvent. Any subsequent calls which examine 
the status of hEvent will only examine the completion of this most recent call
to cuEventRecord().

OpenCL works differently. One can get an event by enqueuing a marker. The
event can than be waited on. To get rid of the event without synchronizing it
I think it can be a good idea to register a callback that releases the event.
I wonder if this is allowed.


Should an event be called

event
marker
label
incident
signal
sensor
phase
terminator
point
token
sign
mark
record
flag
sticker
notice
sign
indicator
future
bookmark
mark

let's try  mark:

feed f1;
feed f2;
mark m;
insert(f1, m); 
// or: mark m(f);
insert(f2, wait_for(m));

not so bad.

old:


probably event is the best, signal is also good
label is also nice

insert(feed, label);
wait_for(label);

insert(feed, event);
append(feed, event);
wait_for(event);
append(other_feed, wait_for(event));

notice n;
feed f;
insert(f, n);
wait_for(n);
f.wait_for(n);

notice n = f.emit();

// synchronize 2 feeds
enqueue(feed1, event);
enqueue(feed2, wait_for(event));

// block caller
wait_for(event);

