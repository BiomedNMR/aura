Todo
====

Add a type that represents references to GPU memory that might be
modified in the future (through already invoked kernel or library call)

OpenCL needs the path to AURA when building kernels. Generalize that.

Kernel arguments probably have to be copied into the args struct to
capture temporaries such as ptr+offset - we can not take the
address of such temporaries and expect it to be valid after the function
exited.

Tests run on device 0 most of the time, for OpenCL this is often
the CPU, so we're not really testing the device. Maybe we should
be able to define on which device ordinal to run tests.

Missing parameters for functions:
Plenty of backend parameters are not exposed at the moment

All types that can be empty should have the bool operator to evaluate to
false if they are empty.

Make boost optional dependency.

Done:

through integer factorization to calculate good kernel size
provide an invoke function that does not take mesh and bundle but simply
a bounds type that specifies how many threads should be launched. Aura
should automatically calculate the number of fibres required. To handle
too many fibres (bounds not divisible by any number that make sense for
the given architecture), a count should be passable to the kernel so
that the kernel can do 
if(fiber_id >= count) return;


Change kernel size to consist of  

There is something weird when putting devices and feeds in vectors
without reserving space beforehand. The move thing does not seem
to work!

-> we take the reference of an object on the stack, the reference
   might be invalid after a while if the object is stored in a
   vector and the vector is resized, this causes the problem -
   the part that is taken by other objects must be allocated on
   the heap.


The kernel calling mechanism should be sanitized, probably with runtime
argument sizes instead of compile time. This reduces the number of functions
we have and the number of error messages we generate in case of an error
and is a lot simpler to maintain and a lot more flexible too.

Maybe remove the empty_ flag and replace by nullptr to device, per convention
if a device resource has a nullptr as device it is neither initialized 
nor usable.

