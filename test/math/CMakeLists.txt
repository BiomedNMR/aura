IF(${AURA_BACKEND} STREQUAL OPENCL)
	AURA_ADD_TEST(basic/add.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(basic/conj.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(basic/div.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(basic/fma.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(basic/mul.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(basic/sub.cpp  ${AURA_BACKEND_LIBRARIES})
       

	AURA_ADD_TEST(blas/axpy.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(blas/dot.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(blas/norm2.cpp  ${AURA_BACKEND_LIBRARIES})


	AURA_ADD_TEST(special/ndmul.cpp  ${AURA_BACKEND_LIBRARIES})
	AURA_ADD_TEST(special/reduced_sum.cpp ${AURA_BACKEND_LIBRARIES})

	AURA_ADD_TEST(partition_mesh.cpp  ${AURA_BACKEND_LIBRARIES})
	#AURA_ADD_TEST(mvmult.cpp  ${AURA_BACKEND_LIBRARIES})    
ENDIF()

AURA_ADD_TEST(split_interleaved.cpp  ${AURA_BACKEND_LIBRARIES})

IF(NOT ${AURA_FFT_LIBRARIES} STREQUAL "")
	AURA_ADD_TEST(fft.cpp  
		${AURA_BACKEND_LIBRARIES} ${AURA_FFT_LIBRARIES} pthread)
ENDIF()

IF(NOT ${AURA_BLAS_LIBRARIES} STREQUAL "")
	AURA_ADD_TEST(blas.cpp  
		${AURA_BACKEND_LIBRARIES} ${AURA_BLAS_LIBRARIES} pthread)
ENDIF()

# this comparison is intentionally written like this because it is a list
IF(NOT "${AURA_FFT_HOST_LIBRARIES}" STREQUAL " ")
	AURA_ADD_TEST(fft_host.cpp pthread 
		${AURA_BACKEND_LIBRARIES} ${AURA_FFT_HOST_LIBRARIES})
ENDIF()

